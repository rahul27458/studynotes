// Dependencies
var child_process = require('child_process')
  , fs = require('fs')
  , path = require('path')
  , async = require('async')
  , _ = require('underscore')
  , md5 = require('MD5')
  , futils = require('futils')
  , error = futils.error
  , log = futils.log

// Constants
var STYLUS = './node_modules/stylus/bin/stylus'
  , NIB = './node_modules/nib/lib/nib'
  , UGLIFY = './node_modules/uglify-js/bin/uglifyjs'

/**
 * List of all client JS files.
 * @type {Array}
 */
module.exports = function (options) {
  var JS_FILENAMES = options.js
    , JS_PREFIX = options.jsPrefix || ''
    , STYLUS_FILENAME = options.stylus
    , PRODUCTION = options.production || false
    , OUT_PATH = options.outPath

  if (!JS_FILENAMES || !STYLUS_FILENAME || !OUT_PATH) {
    error('Missing required options.')
    return
  }

  JS_FILENAMES = _.map(JS_FILENAMES, function (file) {
    if (_.isArray(file)) {
      return PRODUCTION ? file[1] : file[0]
    } else {
      return file
    }
  })

  var COMPILED_PATHS = {
    css: OUT_PATH + '/css/main.css',
    js: OUT_PATH + '/js/main.js'
  }

  /**
   * Build all app static resources (Stylus, JS contcatenation & minification)
   * @param  {Function} cb
   */

  function build (cb) {
    async.auto({
        makeBuildDir: makeBuildDir
      , buildStylus: ['makeBuildDir', buildStylus]
      , buildJS: ['makeBuildDir', buildJS]
      , generateMd5s: ['makeBuildDir', 'buildStylus', 'buildJS', generateMd5s]
      , renameToMd5s: ['makeBuildDir', 'buildStylus', 'buildJS', 'generateMd5s', renameToMd5s]
    }, function(err, results) {
      if (err) {
        error(err)
        cb('Building static resources failed.')
      } else {
        var md5s = results.generateMd5s
        cb(null, md5s)
      }
    })
  }

  /**
   * Delete and re-create the directory where static resources will be stored.
   * @param  {Function} cb
   */

  function makeBuildDir (cb) {
    var command = 'rm -rf ' + OUT_PATH + '; mkdir -p ' + path.join(OUT_PATH, 'css') + '; mkdir -p ' + path.join(OUT_PATH, 'js') + ';'
    child_process.exec(command, {}, cb)
  }

  /**
   * Compile stylus files to CSS
   * @param  {Function} cb
   */

  function buildStylus (cb) {
    var command = STYLUS + ' ' + STYLUS_FILENAME + ' ' + '--use ' + NIB + (PRODUCTION ? ' --compress' : '') + ' --out ' + path.join(OUT_PATH, 'css')
    child_process.exec(command, {}, cb)
  }

  /**
   * Concat and minify JS files
   * @param  {Function} cb
   */

  function buildJS (cb) {
    // Don't compile JS while developing. We include scripts individually in `layout.jade`.
    if (!PRODUCTION) {
      cb(null)
      return
    }

    var files = _.map(JS_FILENAMES, function (file) {
      if (_.isArray(file)) {
        return JS_PREFIX + (PRODUCTION ? file[1] : file[0])
      } else {
        return JS_PREFIX + file
      }
    })

    var command = UGLIFY + ' ' + files.join(' ') + ' -c -o ' + path.join(OUT_PATH, '/js/main.js')
    child_process.exec(command, {}, cb)
  }

  /**
   * Generates md5s for the compiled JS and CSS resources.
   * (Note: filenames are hardcoded.)
   *
   * @param  {Function} cb
   */

  function generateMd5s (cb) {
    async.parallel({
      css: fs.readFile.bind(undefined, COMPILED_PATHS.css),
      js: function (cb) {
        if (PRODUCTION) {
          fs.readFile(COMPILED_PATHS.js, cb)
        } else {
          cb(null)
        }
      }
    }, function(err, results) {
      if (err) {
        error(err)
        return
      }

      var md5s = {}
      _.each(results, function (fileData, resourceType) {
        if (!fileData) return
        md5s[resourceType] = md5(fileData)
      })

      cb(null, md5s)
    })
  }

  /**
   * Renames the compiled JS and CSS resources to include their MD5 checksums
   * in the filename.
   * @param  {Function} cb
   * @param  {Object}   results   Results of functions that have been completed
   *                              from the `async.auto` call in `buildAll`
   *                              See: https://github.com/caolan/async#auto
   */

  function renameToMd5s (cb, results) {
    md5s = _.pairs(results.generateMd5s)
    async.forEach(md5s, function (md5Pair, cb) {
      var resourceType = md5Pair[0]
        , md5 = md5Pair[1]
        , re = new RegExp('\.' + resourceType + '$', 'i')
        , oldFilename = COMPILED_PATHS[resourceType]
        , newFilename = COMPILED_PATHS[resourceType].replace(re, '-' + md5 + '.' + resourceType)

      var command = 'cp ' + oldFilename + ' ' + newFilename
      child_process.exec(command, {}, cb)
    }, cb)
  }

  return {
    build: build,
    JS_FILENAMES: JS_FILENAMES
  }
}